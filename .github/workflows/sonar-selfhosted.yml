name: SonarQube (Self-Hosted) Analysis

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  SONAR_PROJECT_KEY: portfolio
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: TS Resolution Debug
        run: |
          npx tsc -v
          echo '--- Listing declaration files ---'
            ls -l images.d.ts || true
            ls -l src/types || true
          echo '--- showConfig (writing tsconfig-expanded.json) ---'
          npx tsc --showConfig > tsconfig-expanded.json
          grep -n 'images.d.ts' tsconfig-expanded.json || true
          grep -n '@/assets/images' tsconfig-expanded.json || true
          echo '--- traceResolution Card.tsx ---'
          npx tsc --traceResolution src/components/ui/Card.tsx > trace-card.txt || true
          echo '--- traceResolution Projects.tsx ---'
          npx tsc --traceResolution src/sections/Projects.tsx > trace-projects.txt || true
          echo '--- Finished diagnostics (will proceed to full type check) ---'
        continue-on-error: true

      - name: Upload TS debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ts-debug
          path: |
            tsconfig-expanded.json
            trace-card.txt
            trace-projects.txt

      - name: Type check
        run: npx tsc --noEmit

      - name: Build (compile validation)
        run: npm run build

      - name: Generate coverage (placeholder until tests added)
        run: |
          mkdir -p coverage
          echo 'TN:' > coverage/lcov.info

      - name: Upload coverage artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info

      - name: Load Sonar secrets
        env:
          _SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          _SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -z "$_SONAR_HOST_URL" ]; then echo "‚ùå SONAR_HOST_URL secret missing" && exit 1; fi
          if [ -z "$_SONAR_TOKEN" ]; then echo "‚ùå SONAR_TOKEN secret missing" && exit 1; fi
          echo "‚úÖ Sonar secrets present"
          echo "SONAR_HOST_URL=$_SONAR_HOST_URL" >> $GITHUB_ENV
          echo "SONAR_TOKEN=$_SONAR_TOKEN" >> $GITHUB_ENV

      - name: Run SonarQube Scanner (Docker)
        run: |
          echo "üîç Running sonar-scanner against $SONAR_HOST_URL for project $SONAR_PROJECT_KEY"
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_LOGIN="$SONAR_TOKEN" \
            -v "${{ github.workspace }}:/usr/src" \
            sonarsource/sonar-scanner-cli:latest

      - name: Display scanner task file
        run: |
          echo '--- report-task.txt ---'
          cat .scannerwork/report-task.txt || { echo "report-task.txt missing"; exit 1; }
          echo '------------------------'
      - name: Wait for Quality Gate (Self-Hosted Poll)
        run: |
          sudo apt-get update -y >/dev/null 2>&1
          sudo apt-get install -y jq >/dev/null 2>&1
          TASK_FILE=.scannerwork/report-task.txt
          if [ ! -f "$TASK_FILE" ]; then echo "‚ùå Task file not found"; exit 1; fi
          ceTaskId=$(grep '^ceTaskId=' $TASK_FILE | cut -d'=' -f2)
          serverUrl=$(grep '^serverUrl=' $TASK_FILE | cut -d'=' -f2)
          if [ -z "$serverUrl" ]; then serverUrl="$SONAR_HOST_URL"; fi
          echo "‚è≥ Waiting for SonarQube CE task $ceTaskId at $serverUrl"
          for i in $(seq 1 60); do
            statusJson=$(curl -s -u "$SONAR_TOKEN:" "$serverUrl/api/ce/task?id=$ceTaskId") || true
            taskStatus=$(echo "$statusJson" | jq -r '.task.status')
            if [ "$taskStatus" = "SUCCESS" ]; then
              echo "‚úÖ CE task SUCCESS"; break
            elif [ "$taskStatus" = "FAILED" ] || [ "$taskStatus" = "CANCELED" ]; then
              echo "‚ùå CE task $taskStatus"; exit 1
            else
              echo "... still $taskStatus (attempt $i)"
              sleep 5
            fi
          done
          if [ "$taskStatus" != "SUCCESS" ]; then echo "‚ùå Timed out waiting for CE task"; exit 1; fi
          qgJson=$(curl -s -u "$SONAR_TOKEN:" "$serverUrl/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY") || true
          qgStatus=$(echo "$qgJson" | jq -r '.projectStatus.status')
          echo "Quality Gate status: $qgStatus"
          if [ "$qgStatus" != "OK" ]; then
            echo "‚ùå Quality Gate failed"; echo "$qgJson"; exit 1
          fi
          echo "‚úÖ Quality Gate passed"

      - name: Summary
        run: echo "SonarQube self-hosted analysis complete. Quality Gate passed."
