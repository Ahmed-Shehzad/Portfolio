name: Branch Protection & Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

  # Allow manual validation of specific branches
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to validate"
        required: true
        default: "main"

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Validate PR requirements and branch policies
  validation:
    name: Branch & PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Validate PR title
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'perf:', 'test:', 'chore:', 'ci:'];

            const hasValidPrefix = validPrefixes.some(prefix =>
              title.toLowerCase().startsWith(prefix.toLowerCase())
            );

            if (!hasValidPrefix) {
              const commentBody = [
                '‚ùå **Invalid PR Title Format**',
                '',
                'Please use one of the following prefixes:',
                '- `feat:` for new features',
                '- `fix:` for bug fixes',
                '- `docs:` for documentation changes',
                '- `style:` for formatting changes',
                '- `refactor:` for code refactoring',
                '- `perf:` for performance improvements',
                '- `test:` for adding tests',
                '- `chore:` for maintenance tasks',
                '- `ci:` for CI/CD changes',
                '',
                '**Example:** `feat: add PDF resume download functionality`',
                '',
                `Current title: \`${title}\``
              ].join('\n');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });

              core.setFailed('PR title does not follow conventional commit format');
            } else {
              console.log('‚úÖ PR title format is valid');
            }

      - name: Check branch naming convention
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          echo "üåø Validating branch name: $BRANCH_NAME"

          # Define valid patterns
          if [[ "$BRANCH_NAME" =~ ^(feature|fix|hotfix|release|docs|chore)/.+ ]] ||
             [[ "$BRANCH_NAME" =~ ^(main|develop|staging)$ ]] ||
             [[ "$BRANCH_NAME" =~ ^(dependabot|deps)/.+ ]]; then
            echo "‚úÖ Branch name follows convention"
          else
            echo "‚ùå Invalid branch name: $BRANCH_NAME"
            echo ""
            echo "Valid patterns:"
            echo "  - feature/description"
            echo "  - fix/description"
            echo "  - hotfix/description"
            echo "  - docs/description"
            echo "  - chore/description"
            echo "  - release/version"
            echo "  - main, develop, staging (protected branches)"
            exit 1
          fi

  # Code quality checks specific to portfolio project
  portfolio-quality:
    name: Portfolio Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate resume PDF endpoint
        run: |
          echo "üìÑ Validating PDF generation setup..."

          # Check if Puppeteer is properly configured
          if grep -q "puppeteer" package.json; then
            echo "‚úÖ Puppeteer dependency found"
          else
            echo "‚ùå Puppeteer dependency missing"
            exit 1
          fi

          # Check PDF route implementation
          if [ -f "src/app/[locale]/api/resume-pdf/[type]/route.ts" ] && grep -q "generateSpecializedResumePDF\|puppeteer" "src/app/[locale]/api/resume-pdf/[type]/route.ts"; then
            echo "‚úÖ PDF generation route properly implemented"
          else
            echo "‚ùå PDF generation route incomplete"
            exit 1
          fi

          # Check ATSResume component exists
          if [ -f "src/components/server/ATSResume.tsx" ]; then
            echo "‚úÖ ATSResume component found"
          else
            echo "‚ùå ATSResume component missing"
            exit 1
          fi

          # Check resume configurations
          if [ -f "src/features/resume/constants.ts" ] && grep -q "RESUME_CONFIGS\|RESUME_TYPES" "src/features/resume/constants.ts"; then
            echo "‚úÖ Resume configurations found"
          else
            echo "‚ùå Resume configurations missing"
            exit 1
          fi

      - name: Check image optimization
        run: |
          echo "üñºÔ∏è Checking image optimization..."

          # Find large images that should be optimized
          find src/assets/images -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | while read img; do
            size=$(wc -c < "$img")
            if [ $size -gt 500000 ]; then  # 500KB
              echo "‚ö†Ô∏è Large image found: $img ($(($size / 1024))KB)"
            fi
          done

      - name: Check responsive design implementation
        run: |
          echo "üì± Checking responsive design..."

          # Check for Tailwind responsive classes
          if grep -r "sm:\|md:\|lg:\|xl:\|2xl:" src/components src/sections; then
            echo "‚úÖ Responsive classes found"
          else
            echo "‚ö†Ô∏è Consider adding responsive design classes"
          fi

      - name: Performance checks
        run: |
          echo "‚ö° Running performance checks..."

          # Check for potential performance issues
          if grep -r "useEffect.*\[\]" src/; then
            echo "‚ö†Ô∏è Found useEffect hooks - ensure they don't cause performance issues"
          fi

          # Check for heavy imports
          if grep -r "import.*\*.*from" src/; then
            echo "‚ö†Ô∏è Found wildcard imports - consider specific imports for better tree shaking"
          fi

      - name: SEO and accessibility checks
        run: |
          echo "‚ôø Checking SEO and accessibility..."

          # Check for meta tags in layout
          if grep -q "metadata\|title\|description" src/app/layout.tsx; then
            echo "‚úÖ Metadata configuration found"
          else
            echo "‚ùå Missing metadata configuration"
          fi

          # Check for alt attributes in images
          if grep -r "alt=" src/ | grep -v 'alt=""'; then
            echo "‚úÖ Image alt attributes found"
          else
            echo "‚ö†Ô∏è Consider adding alt attributes to images"
          fi

  # Integration testing with key features
  integration-tests:
    name: Portfolio Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          # Install browser for PDF testing
          npx puppeteer browsers install chrome

      - name: Build application
        run: npm run build

      - name: Start application for testing
        run: |
          echo "üöÄ Starting Next.js server..."
          npm run start &
          echo $! > .pid

          # Give server time to start
          sleep 5

          # Wait for server to be ready with better error handling
          echo "‚è≥ Waiting for server to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=30

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Server is ready!"
              break
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Attempt $RETRY_COUNT/$MAX_RETRIES - Server not ready yet, waiting..."
            sleep 2
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Server failed to start within timeout"
            echo "üìä Checking if process is running..."
            if [ -f .pid ]; then
              PID=$(cat .pid)
              if ps -p $PID > /dev/null; then
                echo "Process $PID is running but not responding"
              else
                echo "Process $PID is not running"
              fi
            fi
            exit 1
          fi
        continue-on-error: false

      - name: Test critical endpoints
        run: |
          echo "üß™ Testing critical endpoints..."

          # Test main page (should redirect to locale)
          echo "Testing main page..."
          if curl -f http://localhost:3000/ -o /dev/null 2>/dev/null; then
            echo "‚úÖ Main page loads"
          else
            echo "‚ùå Main page failed"
            exit 1
          fi

          # Test English locale pages
          echo "Testing English home page..."
          if curl -f http://localhost:3000/en -o /dev/null 2>/dev/null; then
            echo "‚úÖ English home page loads"
          else
            echo "‚ùå English home page failed"
            exit 1
          fi

          echo "Testing English resume page..."
          if curl -f http://localhost:3000/en/resumes -o /dev/null 2>/dev/null; then
            echo "‚úÖ English resume selection page loads"
          else
            echo "‚ùå English resume selection page failed"
            exit 1
          fi

          echo "Testing specific resume types..."
          for resume_type in frontend backend fullstack; do
            echo "Testing $resume_type resume..."
            if curl -f http://localhost:3000/en/resume/$resume_type -o /dev/null 2>/dev/null; then
              echo "‚úÖ English $resume_type resume page loads"
            else
              echo "‚ùå English $resume_type resume page failed"
              exit 1
            fi
          done

          # Test German locale pages
          echo "Testing German home page..."
          if curl -f http://localhost:3000/de -o /dev/null 2>/dev/null; then
            echo "‚úÖ German home page loads"
          else
            echo "‚ùå German home page failed"
            exit 1
          fi

          # Test locale-specific API endpoints
          echo "Testing robots API..."
          if curl -f http://localhost:3000/en/api/robots -o /dev/null 2>/dev/null; then
            echo "‚úÖ Robots API responds"
          else
            echo "‚ùå Robots API failed"
            exit 1
          fi

          echo "Testing sitemap API..."
          if curl -f http://localhost:3000/en/api/sitemap -o /dev/null 2>/dev/null; then
            echo "‚úÖ Sitemap API responds"
          else
            echo "‚ùå Sitemap API failed"
            exit 1
          fi

      - name: Test PDF generation
        run: |
          echo "üìÑ Testing PDF generation..."

          # Test PDF generation for different resume types
          for resume_type in frontend backend fullstack; do
            echo "Testing $resume_type PDF generation..."
            response=$(timeout 60 curl -s -w "%{http_code}" http://localhost:3000/en/api/resume-pdf/$resume_type -o test-$resume_type.pdf 2>/dev/null || echo "timeout")

            if [ "$response" = "timeout" ]; then
              echo "‚ùå $resume_type PDF generation timed out (>60s)"
              exit 1
            elif [ "$response" = "200" ] && [ -f test-$resume_type.pdf ] && [ -s test-$resume_type.pdf ]; then
              echo "‚úÖ $resume_type PDF generation successful"
              echo "üìä $resume_type PDF size: $(wc -c < test-$resume_type.pdf) bytes"
            else
              echo "‚ùå $resume_type PDF generation failed (HTTP: $response)"
              if [ -f test-$resume_type.pdf ]; then
                echo "üìÑ $resume_type PDF file size: $(wc -c < test-$resume_type.pdf) bytes"
              else
                echo "üìÑ No $resume_type PDF file created"
              fi
              exit 1
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          if [ -f .pid ]; then
            kill $(cat .pid) || true
            rm .pid
          fi
          rm -f test-*.pdf

  # Security and vulnerability scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate

      - name: Check for sensitive data
        run: |
          echo "üïµÔ∏è Checking for sensitive data..."

          # Check for potential secrets
          if grep -r -i "password\|secret\|key\|token" src/ --exclude-dir=node_modules --exclude="*.test.*" | grep -v "// " | grep -v "placeholder\|example"; then
            echo "‚ö†Ô∏è Potential sensitive data found - please review"
          else
            echo "‚úÖ No obvious sensitive data found"
          fi

      - name: Dependency vulnerability check
        run: |
          echo "üì¶ Checking dependency vulnerabilities..."
          npx audit-ci --config .audit-ci.json
