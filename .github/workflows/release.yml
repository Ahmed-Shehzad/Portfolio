name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Release notes"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: "20"
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run full test suite
        run: |
          npm run lint
          npm run type-check
          npm run test
          npm run build

      - name: 📝 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 🏷️ Bump version
        id: version
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "## 🏷️ Version Bump" >> $GITHUB_STEP_SUMMARY
          echo "Updated version from $OLD_VERSION to $NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: 📝 Update changelog
        run: |
          RELEASE_NOTES="${{ inputs.release_notes }}"
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release v${{ steps.version.outputs.new_version }}"
          fi

          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new release to changelog
          NEW_ENTRY="## [${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)\n\n$RELEASE_NOTES\n"
          echo -e "$NEW_ENTRY" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md

      - name: 💾 Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ${{ inputs.release_notes || format('Release v{0}', steps.version.outputs.new_version) }}

            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ## Deployment
            This release has been automatically deployed to production.
          draft: false
          prerelease: false
