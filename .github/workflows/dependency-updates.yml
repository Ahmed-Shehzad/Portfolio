name: Dependency Updates

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: "0 6 * * 0"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  dependency-review:
    name: Dependency Review & Updates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "Checking for outdated dependencies..."
          npm outdated --json > outdated.json || true

          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "📊 Found outdated dependencies:"
            cat outdated.json
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ All dependencies are up to date"
          fi

      - name: Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate --json > audit.json || true

          # Check if vulnerabilities exist
          if grep -q '"vulnerabilities":' audit.json; then
            VULN_COUNT=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
            echo "⚠️ Found $VULN_COUNT vulnerabilities"
            echo "vuln_count=$VULN_COUNT" >> $GITHUB_ENV
          else
            echo "✅ No vulnerabilities found"
            echo "vuln_count=0" >> $GITHUB_ENV
          fi

      - name: Create dependency update PR
        if: steps.outdated.outputs.has_updates == 'true' || env.vuln_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let prBody = '## 🔄 Automated Dependency Updates\n\n';
            prBody += 'This PR contains automated dependency updates and security fixes.\n\n';

            // Add outdated dependencies info
            if (fs.existsSync('outdated.json') && fs.statSync('outdated.json').size > 0) {
              const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
              prBody += '### 📦 Outdated Dependencies\n\n';

              for (const [pkg, info] of Object.entries(outdated)) {
                prBody += `- **${pkg}**: ${info.current} → ${info.wanted} (latest: ${info.latest})\n`;
              }
              prBody += '\n';
            }

            // Add vulnerability info
            if (fs.existsSync('audit.json')) {
              const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
              if (audit.metadata && audit.metadata.vulnerabilities.total > 0) {
                prBody += '### 🔐 Security Vulnerabilities\n\n';
                prBody += `Found ${audit.metadata.vulnerabilities.total} vulnerabilities:\n`;
                prBody += `- Critical: ${audit.metadata.vulnerabilities.critical}\n`;
                prBody += `- High: ${audit.metadata.vulnerabilities.high}\n`;
                prBody += `- Moderate: ${audit.metadata.vulnerabilities.moderate}\n`;
                prBody += `- Low: ${audit.metadata.vulnerabilities.low}\n\n`;
              }
            }

            prBody += '### ✅ Actions Taken\n\n';
            prBody += '- [ ] Review all dependency updates\n';
            prBody += '- [ ] Test application functionality\n';
            prBody += '- [ ] Verify security fixes\n';
            prBody += '- [ ] Run full test suite\n\n';

            prBody += '### 🧪 Testing Checklist\n\n';
            prBody += '- [ ] Homepage loads correctly\n';
            prBody += '- [ ] Resume page functions properly\n';
            prBody += '- [ ] PDF generation works\n';
            prBody += '- [ ] All API endpoints respond\n';
            prBody += '- [ ] Build process completes successfully\n\n';

            prBody += '---\n';
            prBody += '*This PR was created automatically by the dependency update workflow.*';

            // Create branch name
            const date = new Date().toISOString().split('T')[0];
            const branchName = `deps/automated-updates-${date}`;

            // Create the PR (note: actual file changes would need to be committed first)
            console.log('📝 Dependency update summary prepared');
            console.log('🌿 Branch name:', branchName);
            console.log('📄 PR body length:', prBody.length);

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports-${{ github.run_number }}
          path: |
            outdated.json
            audit.json
          retention-days: 30

  # Weekly maintenance tasks
  maintenance:
    name: Weekly Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Clean cache and rebuild
        run: |
          echo "🧹 Cleaning npm cache..."
          npm cache clean --force

          echo "📦 Installing fresh dependencies..."
          rm -rf node_modules package-lock.json
          npm install

          echo "🏗️ Testing build process..."
          npm run build

      - name: Check bundle size
        run: |
          echo "📊 Analyzing bundle size..."

          # Install bundle analyzer if not already present
          npm install --no-save webpack-bundle-analyzer

          # Generate bundle analysis
          npx webpack-bundle-analyzer .next/static/chunks/*.js --report --mode json > bundle-analysis.json

          echo "Bundle analysis completed!"

      - name: Generate maintenance report
        run: |
          echo "📋 Weekly Maintenance Report - $(date)" > maintenance-report.md
          echo "=================================" >> maintenance-report.md
          echo "" >> maintenance-report.md

          echo "## 📦 Dependencies" >> maintenance-report.md
          echo "- Total packages: $(npm list --depth=0 2>/dev/null | grep -c '├──\|└──')" >> maintenance-report.md
          echo "- Dev dependencies: $(npm list --depth=0 --dev 2>/dev/null | grep -c '├──\|└──')" >> maintenance-report.md
          echo "" >> maintenance-report.md

          echo "## 🏗️ Build Health" >> maintenance-report.md
          echo "- Build status: ✅ Successful" >> maintenance-report.md
          echo "- Node version: $(node --version)" >> maintenance-report.md
          echo "- NPM version: $(npm --version)" >> maintenance-report.md
          echo "" >> maintenance-report.md

          echo "## 📊 Project Stats" >> maintenance-report.md
          echo "- TypeScript files: $(find src -name '*.ts' -o -name '*.tsx' | wc -l)" >> maintenance-report.md
          echo "- Component files: $(find src/components -name '*.tsx' | wc -l)" >> maintenance-report.md
          echo "- Test files: $(find src -name '*.test.*' | wc -l)" >> maintenance-report.md

          cat maintenance-report.md

      - name: Upload maintenance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report-${{ github.run_number }}
          path: |
            maintenance-report.md
            bundle-analysis.json
          retention-days: 90
