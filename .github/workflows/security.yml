name: Security & Quality

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan weekly on Sundays at 00:00 UTC
    - cron: "0 0 * * 0"

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          # Run npm audit and capture output
          npm audit --json > audit-results.json || true

          # Check if jq is available
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Check if there are any vulnerabilities
          if [ -f "audit-results.json" ]; then
            VULNERABILITIES=$(cat audit-results.json |
              jq '.metadata.vulnerabilities.total // 0' 2>/dev/null ||
              echo "0")

            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $VULNERABILITIES vulnerabilities"
              echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
              # Display summary
              cat audit-results.json |
                jq '.metadata.vulnerabilities' 2>/dev/null ||
                echo "Could not parse vulnerabilities"
            else
              echo "‚úÖ No vulnerabilities found"
              echo "vulnerabilities=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Could not generate audit results"
            echo "vulnerabilities=0" >> $GITHUB_OUTPUT
          fi
        id: vulnerability-check

      - name: Alternative dependency security check
        run: |
          echo "üîç Running alternative security checks..."

          # Use our custom security script
          npm run security:check || true

          # Check for outdated packages
          echo "üìÖ Checking for outdated packages..."
          npm outdated --json > outdated-packages.json ||
            echo '{}' > outdated-packages.json

          # Display results
          if [ -f "outdated-packages.json" ] &&
             [ "$(cat outdated-packages.json)" != "{}" ]; then
            echo "üìÖ Found outdated packages"
          else
            echo "‚úÖ All packages are up to date"
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: security-reports
          path: |
            audit-results.json
            retire-report.json
            outdated-packages.json
          retention-days: 7

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests with coverage..."
          npm run test:ci ||
            echo "Tests completed with potential issues"

          # Check if coverage files exist
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ LCOV coverage report generated"
            ls -la coverage/
          else
            echo "‚ùå LCOV coverage report not found"
            echo "Available files in coverage directory:"
            ls -la coverage/ ||
              echo "Coverage directory not found"
          fi

          # Check if generic report was created successfully
          if [ -f "coverage/generic-report.xml" ]; then
            echo "‚úÖ Generic test report generated"
            echo "Generic report size:
              $(wc -l < coverage/generic-report.xml) lines"
            # Validate XML format
            head -n 5 coverage/generic-report.xml
          else
            echo "‚ùå Generic test report not found"
          fi

      - name: Create SonarQube properties
        run: |
          echo "sonar.projectKey=Ahmed-Shehzad_Portfolio" > sonar-project.properties
          echo "sonar.organization=ahmed-shehzad" >> sonar-project.properties
          echo "sonar.sources=src" >> sonar-project.properties
          echo "sonar.tests=src" >> sonar-project.properties
          echo "sonar.test.inclusions=**/*.test.ts,**/*.test.tsx" >> sonar-project.properties
          echo "sonar.exclusions=**/*.test.ts,**/*.test.tsx,
            **/node_modules/**,**/*.d.ts,**/coverage/**" >>
            sonar-project.properties

          # Always include LCOV coverage if it exists
          if [ -f "coverage/lcov.info" ]; then
            echo "sonar.javascript.lcov.reportPaths=coverage/lcov.info" >>
              sonar-project.properties
            echo "sonar.typescript.lcov.reportPaths=coverage/lcov.info" >>
              sonar-project.properties
          fi

          # Only add generic report if it exists and is valid XML
          if [ -f "coverage/generic-report.xml" ] &&
             head -n 1 coverage/generic-report.xml |
             grep -q "<?xml\|<testExecutions" 2>/dev/null; then
            echo "sonar.testExecutionReportPaths=coverage/generic-report.xml" >>
              sonar-project.properties
            echo "‚úÖ Including test execution report in SonarQube analysis"
          else
            echo "‚ö†Ô∏è Skipping test execution report -
              file not found or invalid format"
          fi

          echo "üìã SonarQube properties:"
          cat sonar-project.properties

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    continue-on-error: true

    strategy:
      fail-fast: false
      matrix:
        # Simplified to just javascript since TS compiles to JS
        language: ["javascript"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        continue-on-error: true
        with:
          category: "/language:${{ matrix.language }}"

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: |
          echo "üì¶ Building application for bundle analysis..."
          npm run build || echo "Build failed, continuing with analysis..."

      - name: Analyze bundle size
        run: |
          echo "üìä Analyzing bundle size..."
          if [ -d ".next" ]; then
            echo "‚úÖ Build directory found, analyzing..."
            du -sh .next/* || echo "Could not analyze bundle size"
          else
            echo "‚ùå Build directory not found"
          fi
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: bundle-analysis
          path: |
            .next/
            package.json
          retention-days: 3
