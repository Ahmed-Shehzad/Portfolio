name: Sonar Code Analysis

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  analyze:
    name: Sonar Scan & Coverage
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history for blame/PR decoration

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: TS Resolution Debug
        run: |
          npx tsc -v
          echo '--- Listing declaration files ---'
          ls -l images.d.ts || true
          ls -l src/types || true
          echo '--- showConfig (writing tsconfig-expanded.json) ---'
          npx tsc --showConfig > tsconfig-expanded.json
          grep -n 'images.d.ts' tsconfig-expanded.json || true
          grep -n '@/assets/images' tsconfig-expanded.json || true
          echo '--- traceResolution Card.tsx ---'
          npx tsc --traceResolution src/components/ui/Card.tsx > trace-card.txt || true
          echo '--- traceResolution Projects.tsx ---'
          npx tsc --traceResolution src/sections/Projects.tsx > trace-projects.txt || true
          echo '--- Finished diagnostics (will proceed to full type check) ---'
        continue-on-error: true

      - name: Upload TS debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ts-debug
          path: |
            tsconfig-expanded.json
            trace-card.txt
            trace-projects.txt

      - name: Type check
        run: npx tsc --noEmit

      - name: Build (verifies compile)
        run: npm run build

      - name: Generate coverage (placeholder)
        run: |
          echo "No test framework configured yet. Creating placeholder lcov file." \
          && mkdir -p coverage \
          && echo 'TN:' > coverage/lcov.info
        # Replace above with your test command once tests are added, e.g.:
        # run: npm run test:coverage

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info

      - name: Sonar Scan (Docker)
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "SONAR_TOKEN secret not set. Please add it to the repository secrets." && exit 1
          fi
          # Default host if none provided (SonarCloud)
          if [ -z "$SONAR_HOST_URL" ]; then
            export SONAR_HOST_URL="https://sonarcloud.io"
          fi
          echo "Running sonar-scanner against $SONAR_HOST_URL"
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v "${{ github.workspace }}:/usr/src" \
            sonarsource/sonar-scanner-cli:latest

      - name: Summary
        run: |
          echo "Sonar analysis initiated. View results in your Sonar project dashboard." \
          && echo "Remember to replace placeholders in sonar-project.properties (projectKey & organization)."

  quality-gate:
    name: Sonar Quality Gate
    needs: analyze
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # optional: skip waiting on PRs to speed feedback
    steps:
      - name: Wait for Quality Gate
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: sonar.qualitygate.wait=true
