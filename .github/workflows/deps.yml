name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for updates
        id: updates
        run: |
          echo "üîç Checking for dependency updates..."

          # Check which dependencies can be updated
          OUTDATED=$(ncu --format json || echo '{}')

          # Count outdated dependencies
          OUTDATED_COUNT=$(echo "$OUTDATED" | jq 'length')

          echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          echo "outdated-deps=$OUTDATED" >> $GITHUB_OUTPUT

          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "üì¶ Found $OUTDATED_COUNT outdated dependencies"
            echo "$OUTDATED" | jq -r 'to_entries[] | "- \(.key): \(.value)"'
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ All dependencies are up to date"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Update dependencies
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          # Update patch versions (safe updates)
          ncu --target patch -u

          # Install updated dependencies
          npm install

          echo "üîß Updated patch versions"

      - name: Run tests
        if: steps.updates.outputs.has-updates == 'true'
        run: |
          # Build web worker first
          npm run build:worker

          # Run full test suite
          npm run check
          npm run test

      - name: Create Pull Request
        if: steps.updates.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies (patch versions)"
          title: "üîÑ Automated Dependency Updates"
          body: |
            ## üîÑ Automated Dependency Updates

            This PR contains automated dependency updates for patch versions.

            ### üì¶ Updated Dependencies
            ${{ steps.updates.outputs.outdated-count }} dependencies were updated.

            ### ‚úÖ Verification
            - [x] Tests passed
            - [x] Build successful
            - [x] Web Worker compilation successful

            ### üîç Changes
            - Updated patch versions only (safe updates)
            - No breaking changes expected

            ---
            *This PR was created automatically by the dependency update workflow.*

            **Review Guidelines:**
            1. Check the dependency changes in package.json
            2. Verify all tests pass
            3. Test the application locally if needed
            4. Merge when ready
          branch: automated/dependency-updates
          delete-branch: true
          draft: false
          labels: |
            dependencies
            automated
            patch-updates

      - name: Check for major updates
        id: major-updates
        run: |
          echo "üîç Checking for major version updates..."

          # Check for major updates (potentially breaking)
          MAJOR_UPDATES=$(ncu --target major --format json || echo '{}')
          MAJOR_COUNT=$(echo "$MAJOR_UPDATES" | jq 'length')

          if [ "$MAJOR_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $MAJOR_COUNT major version updates available"
            echo "$MAJOR_UPDATES" | jq -r 'to_entries[] | "- \(.key): \(.value)"'
            echo "has-major=true" >> $GITHUB_OUTPUT
            echo "major-deps=$MAJOR_UPDATES" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No major version updates available"
            echo "has-major=false" >> $GITHUB_OUTPUT
          fi

      - name: Create issue for major updates
        if: steps.major-updates.outputs.has-major == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const majorUpdates = JSON.parse('${{ steps.major-updates.outputs.major-deps }}');
            const updateList = Object.entries(majorUpdates)
              .map(([pkg, version]) => `- \`${pkg}\`: ${version}`)
              .join('\n');

            const issueBody = `## üö® Major Dependency Updates Available

            The following dependencies have major version updates available that may contain breaking changes:

            ${updateList}

            ### üîç Action Required
            These updates require manual review and testing:

            1. **Review changelogs** for each dependency
            2. **Check for breaking changes**
            3. **Update code** if necessary
            4. **Test thoroughly** before deploying
            5. **Update TypeScript types** if needed

            ### üìã Update Checklist
            - [ ] Review dependency changelogs
            - [ ] Check for breaking changes
            - [ ] Update application code
            - [ ] Update tests
            - [ ] Verify build passes
            - [ ] Test application functionality
            - [ ] Update documentation if needed

            ### üîó Resources
            - [npm-check-updates documentation](https://github.com/raineorshine/npm-check-updates)
            - [Semantic Versioning](https://semver.org/)

            ---
            *This issue was created automatically by the dependency update workflow.*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Major Dependency Updates Available',
              body: issueBody,
              labels: ['dependencies', 'major-updates', 'breaking-changes']
            });

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        id: audit
        run: |
          echo "üîí Running security audit..."

          # Run audit and capture results
          AUDIT_RESULT=$(npm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')

          # Extract vulnerability counts
          HIGH=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.critical // 0')
          MODERATE=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.moderate // 0')
          LOW=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.low // 0')

          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT

          TOTAL=$((HIGH + CRITICAL + MODERATE + LOW))
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

          if [ "$TOTAL" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $TOTAL security vulnerabilities"
            echo "  - Critical: $CRITICAL"
            echo "  - High: $HIGH"
            echo "  - Moderate: $MODERATE"
            echo "  - Low: $LOW"
            echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No security vulnerabilities found"
            echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security issue
        if: steps.audit.outputs.has-vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const critical = ${{ steps.audit.outputs.critical }};
            const high = ${{ steps.audit.outputs.high }};
            const moderate = ${{ steps.audit.outputs.moderate }};
            const low = ${{ steps.audit.outputs.low }};
            const total = ${{ steps.audit.outputs.total }};

            const severity = critical > 0 ? 'üö® CRITICAL' : high > 0 ? '‚ö†Ô∏è HIGH' : 'üì¢ MODERATE';
            const urgency = critical > 0 || high > 0 ? 'URGENT' : 'Standard';

            const issueBody = `## üîí Security Vulnerabilities Detected

            **Severity**: ${severity}
            **Priority**: ${urgency}
            **Total Vulnerabilities**: ${total}

            ### üìä Breakdown
            - üö® Critical: ${critical}
            - ‚ö†Ô∏è High: ${high}
            - üì¢ Moderate: ${moderate}
            - ‚ÑπÔ∏è Low: ${low}

            ### üîß Action Required
            ${critical > 0 || high > 0 ?
              '**IMMEDIATE ACTION REQUIRED** - Critical or high severity vulnerabilities detected.' :
              'Review and address vulnerabilities when convenient.'}

            ### üõ†Ô∏è How to Fix
            1. Run \`npm audit fix\` to automatically fix issues
            2. For manual fixes, run \`npm audit\` for detailed information
            3. Update specific packages: \`npm update [package-name]\`
            4. Check for alternative packages if fixes aren't available

            ### üîç Investigation Steps
            - [ ] Run \`npm audit\` locally
            - [ ] Review vulnerability details
            - [ ] Apply fixes or update packages
            - [ ] Test application thoroughly
            - [ ] Verify fixes resolved issues

            ---
            *This issue was created automatically by the security audit workflow.*`;

            const labels = ['security', 'vulnerabilities'];
            if (critical > 0) labels.push('critical');
            if (high > 0) labels.push('high-priority');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîí Security Alert: ${total} vulnerabilities found (${severity.split(' ')[1]})`,
              body: issueBody,
              labels: labels
            });
