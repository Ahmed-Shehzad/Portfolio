name: CI/CD - Vercel Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Security: restrict default permissions
permissions:
  contents: read
  deployments: write
  statuses: write
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  CACHE_KEY_PREFIX: v2

jobs:
  # Quality Gates - Code Quality & Testing
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v5.2.0

      - name: Setup Node.js
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          # Install Puppeteer dependencies for PDF generation testing
          npx puppeteer browsers install chrome

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Type checking
        run: |
          echo "TypeScript version:"
          npx tsc --version
          echo "Checking file structure:"
          ls -la *.d.ts
          echo "Creating CI-specific tsconfig with comprehensive path resolution..."
          cat > tsconfig.ci.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "skipLibCheck": true,
              "noEmit": true,
              "moduleResolution": "node",
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"],
                "@/assets/*": ["./src/assets/*"],
                "@/assets/images/*": ["./src/assets/images/*"],
                "@/features/*": ["./src/features/*"],
                "@/config/*": ["./src/config/*"]
              },
              "typeRoots": ["./node_modules/@types", "./types", "."]
            },
            "include": [
              "next-env.d.ts",
              "**/*.ts",
              "**/*.tsx",
              "global.d.ts",
              "images.d.ts",
              "svg.d.ts",
              "image-types.d.ts",
              "src/**/*.ts",
              "src/**/*.tsx",
              "src/types/**/*.d.ts"
            ]
          }
          EOF
          echo "Generated CI TypeScript config:"
          cat tsconfig.ci.json
          echo "Running type check with CI config..."
          npx tsc --project tsconfig.ci.json --listFiles | head -10

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run tests
        run: npm run test
        continue-on-error: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        if: success()
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            .next/
            out/
            !.next/cache/
          retention-days: 1

  # Preview Deployment for Pull Requests
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v5.2.0

      - name: Deploy to Vercel Preview
        id: preview-deploy
        uses: amondnet/vercel-action@16e87c0a08142b0d0d33b76aeaf20823c381b9b9 # v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Verify preview deployment
        env:
          # For preview deployments, use the preview URL
          PREVIEW_URL: ${{ steps.preview-deploy.outputs.preview-url }}
        run: |
          echo "🔍 Preview deployment completed!"
          echo "📊 Preview URL: $PREVIEW_URL"

          echo "Performing preview deployment health check..."

          # Check if the preview URL responds
          response_code=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" || echo "000")
          echo "Preview response code: $response_code"

          if [ "$response_code" = "200" ]; then
            echo "✅ Preview site is publicly accessible"
          elif [ "$response_code" = "401" ]; then
            echo "⚠️ Preview site is protected (401) - this is expected for some preview deployments"
            echo "✅ Preview deployment successful, but site requires authentication"
          elif [ "$response_code" -ge "400" ] && [ "$response_code" -lt "500" ]; then
            echo "❌ Preview deployment client error: $response_code"
            exit 1
          elif [ "$response_code" -ge "500" ]; then
            echo "❌ Preview deployment server error: $response_code"
            exit 1
          elif [ "$response_code" = "000" ]; then
            echo "❌ Could not connect to preview deployment"
            exit 1
          else
            echo "✅ Preview deployment accessible with status: $response_code"
          fi

      - name: Comment PR with Preview URL
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: success()
        env:
          PREVIEW_URL: ${{ steps.preview-deploy.outputs.preview-url }}
        with:
          script: |
            const previewUrl = process.env.PREVIEW_URL;

            if (previewUrl) {
              const commentBody = [
                '🚀 **Preview Deployment Ready!**',
                '',
                '**Build Summary:**',
                '- ✅ Quality gates passed',
                '- ✅ Build successful',
                '- ✅ Preview deployed',
                '- ✅ Health check completed',
                '',
                `🔗 **Preview URL:** ${previewUrl}`,
                '',
                '📊 **Key Features to Test:**',
                '- Resume page and PDF generation',
                '- All sections load correctly',
                '- Responsive design',
                '- Performance metrics',
                '',
                '*This preview will be automatically updated with new commits.*'
              ].join('\n');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              console.log('No preview URL available for comment');
            }

  # Production Deployment to Vercel
  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15
    outputs:
      production-url: ${{ steps.deploy.outputs.preview-url }}
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v5.2.0

      - name: Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@16e87c0a08142b0d0d33b76aeaf20823c381b9b9 # v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Verify deployment
        env:
          # For production deployments, use the production URL
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.preview-url }}
        run: |
          echo "🚀 Production deployment completed!"
          echo "📊 Production URL: $DEPLOYMENT_URL"

          # Extract the production domain from the preview URL for production deployments
          # Production deployments should use the main domain, not the preview URL
          if [[ "$DEPLOYMENT_URL" == *"vercel.app"* ]]; then
            # For now, use the preview URL but note it's a production deployment
            echo "ℹ️ Using Vercel preview URL for production deployment validation"
            PRODUCTION_URL="$DEPLOYMENT_URL"
          else
            PRODUCTION_URL="$DEPLOYMENT_URL"
          fi

          echo "Testing production deployment at: $PRODUCTION_URL"

          # For production deployments, the URL might be protected by Vercel's auth
          # Let's try with a more lenient health check
          echo "Performing production deployment health check..."

          # Check if the URL responds (even with auth)
          response_code=$(curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL" || echo "000")
          echo "Response code: $response_code"

          if [ "$response_code" = "200" ]; then
            echo "✅ Production site is publicly accessible"
          elif [ "$response_code" = "401" ]; then
            echo "⚠️ Production site is protected (401) - this may be expected for Vercel deployments"
            echo "✅ Production deployment successful, but site requires authentication"
          elif [ "$response_code" -ge "400" ] && [ "$response_code" -lt "500" ]; then
            echo "❌ Production deployment client error: $response_code"
            exit 1
          elif [ "$response_code" -ge "500" ]; then
            echo "❌ Production deployment server error: $response_code"
            exit 1
          elif [ "$response_code" = "000" ]; then
            echo "❌ Could not connect to production deployment"
            exit 1
          else
            echo "✅ Production deployment accessible with status: $response_code"
          fi

      - name: Post-deployment validation
        env:
          # For production deployments, use the same URL as deployment verification
          SITE_URL: ${{ steps.deploy.outputs.preview-url }}
        run: |
          # Test critical endpoints with improved error handling for production
          echo "Testing critical production endpoints..."

          # Function to test endpoint with better error handling
          test_endpoint() {
            local url=$1
            local name=$2
            local response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")

            echo "Testing production $name ($url): $response_code"

            if [ "$response_code" = "200" ]; then
              echo "✅ Production $name is publicly accessible"
              return 0
            elif [ "$response_code" = "401" ]; then
              echo "⚠️ Production $name is protected (401) - deployment successful but requires auth"
              return 0
            elif [ "$response_code" -ge "400" ] && [ "$response_code" -lt "500" ]; then
              echo "❌ $name client error: $response_code"
              return 1
            elif [ "$response_code" -ge "500" ]; then
              echo "❌ $name server error: $response_code"
              return 1
            elif [ "$response_code" = "000" ]; then
              echo "❌ Could not connect to $name"
              return 1
            else
              echo "✅ $name accessible with status: $response_code"
              return 0
            fi
          }

          # Test main page
          test_endpoint "$SITE_URL/" "Main page"

          # Test resume page
          test_endpoint "$SITE_URL/resume" "Resume page"

          # Test API routes
          test_endpoint "$SITE_URL/api/robots" "Robots API"

          test_endpoint "$SITE_URL/api/sitemap" "Sitemap API"

          echo "🎉 All critical endpoints tested successfully!"

  # Performance & Security Audit
  audit:
    name: Performance & Security Audit
    runs-on: ubuntu-latest
    needs: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v5.2.0

      - name: Setup Node.js
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=high

          # Check for known vulnerabilities
          npx audit-ci --config .audit-ci.json || true

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@2f8dda6cf4de7d73b29853c3f29e73a01e297bd8 # v12.1.0
        with:
          urls: |
            https://portfolio-azure-five-75.vercel.app/
            https://portfolio-azure-five-75.vercel.app/resume
          configPath: "./.github/lighthouse/lighthouse-config.js"
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [preview, production, audit]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const ageInMs = Date.now() - new Date(artifact.created_at);
              const ageInDays = ageInMs / (1000 * 60 * 60 * 24);
              return ageInDays > 7; // Keep artifacts for 7 days
            });

            for (const artifact of oldArtifacts) {
              console.log(`Deleting artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
