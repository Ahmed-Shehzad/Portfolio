name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  pull-requests: write
  checks: write
  statuses: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"

jobs:
  # Quality checks and testing
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: 📦 Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: |
          npm ci
          npx puppeteer browsers install chrome

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🎨 Check formatting
        run: npm run format:check

      - name: 🔧 Type check
        run: npm run type-check

      - name: 🧪 Run tests
        run: npm run test

      - name: 🏗️ Build project
        run: npm run build

      - name: 📊 Upload test coverage
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Deploy to production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: � Check existing deployments
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "🔍 Checking recent Vercel deployments..."
          vercel list --token $VERCEL_TOKEN | head -10 || echo "Failed to list deployments"

      - name: �🚀 Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "🚀 Starting Vercel deployment..."
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"

          npm i -g vercel@latest
          mkdir -p .vercel
          echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json

          echo "📋 Vercel CLI version: $(vercel --version)"
          echo "🔧 Deploying to production..."

          # Deploy and capture the full output
          DEPLOY_OUTPUT=$(vercel --token $VERCEL_TOKEN --prod --yes 2>&1)
          echo "📄 Deploy output:"
          echo "$DEPLOY_OUTPUT"

          # Extract deployment URL more reliably
          DEPLOYMENT_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[^[:space:]]*\.vercel\.app" | tail -1)

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "❌ Failed to extract deployment URL"
            echo "Full output was: $DEPLOY_OUTPUT"
            exit 1
          fi

          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "✅ Successfully deployed to: $DEPLOYMENT_URL"

      - name: 🔄 Update deployment URLs
        run: |
          echo "${{ steps.deploy.outputs.deployment_url }}" > deployment-url.txt
          chmod +x ./scripts/update-deployment-urls.sh
          ./scripts/update-deployment-urls.sh

      - name: 📝 Create PR for URL updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          git add deployment-url.txt public/robots.txt public/sitemap.xml
          if git diff --staged --quiet; then
            echo "No URL changes to commit"
            echo "url_update_needed=false" >> $GITHUB_ENV
          else
            echo "url_update_needed=true" >> $GITHUB_ENV

            # Create a new branch for URL updates
            BRANCH_NAME="chore/update-deployment-urls-$(date +%s)"
            git checkout -b "$BRANCH_NAME"

            # Commit changes with simple message
            git commit -m "chore: update deployment URLs after production deployment [skip ci]"

            # Push the branch
            git push origin "$BRANCH_NAME"

            # Create PR using GitHub CLI
            PR_URL=$(gh pr create \
              --title "chore: update deployment URLs [auto-merge]" \
              --body "🤖 Automated URL update after production deployment to: ${{ steps.deploy.outputs.deployment_url }}" \
              --head "$BRANCH_NAME" \
              --base main \
              --label "automated" \
              --label "deployment")

            echo "Created PR for URL updates: $PR_URL"
            echo "Branch: $BRANCH_NAME"

            # Try to enable auto-merge if the repository supports it
            gh pr merge "$PR_URL" --auto --squash || echo "Auto-merge not available - manual merge required"
          fi

      - name: 📋 Deployment Summary
        run: |
          echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Live URL:** ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          if [ "${url_update_needed:-false}" = "true" ]; then
            echo "**URL Updates:** Pull request created for deployment URL updates" >> $GITHUB_STEP_SUMMARY
          else
            echo "**URL Updates:** No changes needed" >> $GITHUB_STEP_SUMMARY
          fi
