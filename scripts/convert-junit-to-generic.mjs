#!/usr/bin/env node
/**
 * Convert JUnit XML to Generic Test Data format for SonarQube
 *
 * This script converts the JUnit XML format generated by Vitest to the Generic Test Data format
 * that SonarQube can understand for test reporting.
 *
 * Usage: node convert-junit-to-generic.mjs <input-file> <output-file>
 */

import { readFileSync, writeFileSync } from "fs";
import { promisify } from "util";
import { parseString } from "xml2js";

const parseXML = promisify(parseString);

function convertJUnitToGeneric(junitXml) {
  const genericTestData = {
    version: "1",
    tests: [],
  };

  if (!junitXml || !junitXml.testsuites) {
    console.warn("No test suites found in JUnit XML");
    return genericTestData;
  }

  const testsuites = Array.isArray(junitXml.testsuites.testsuite)
    ? junitXml.testsuites.testsuite
    : [junitXml.testsuites.testsuite];

  testsuites.forEach((testsuite) => {
    if (!testsuite || !testsuite.testcase) return;

    const testcases = Array.isArray(testsuite.testcase) ? testsuite.testcase : [testsuite.testcase];

    testcases.forEach((testcase) => {
      const test = {
        name: testcase.$.name || "Unknown Test",
        duration: Math.round(parseFloat(testcase.$.time || "0") * 1000), // Convert to milliseconds
        result: "ok",
      };

      // Check for failures or errors
      if (testcase.failure || testcase.error) {
        test.result = "failure";
        if (testcase.failure && testcase.failure[0]) {
          test.details = {
            message: testcase.failure[0].$.message || "Test failed",
            type: testcase.failure[0].$.type || "AssertionError",
          };
        } else if (testcase.error && testcase.error[0]) {
          test.details = {
            message: testcase.error[0].$.message || "Test error",
            type: testcase.error[0].$.type || "Error",
          };
        }
      }

      // Check for skipped tests
      if (testcase.skipped) {
        test.result = "skipped";
      }

      genericTestData.tests.push(test);
    });
  });

  return genericTestData;
}

async function main() {
  const args = process.argv.slice(2);

  if (args.length !== 2) {
    console.error("Usage: node convert-junit-to-generic.mjs <input-file> <output-file>");
    process.exit(1);
  }

  const [inputFile, outputFile] = args;

  try {
    // Check if input file exists
    let junitXmlContent;
    try {
      junitXmlContent = readFileSync(inputFile, "utf8");
    } catch (error) {
      if (error.code === "ENOENT") {
        console.warn(`Input file ${inputFile} not found. Creating empty generic test data file.`);
        const emptyGenericData = {
          version: "1",
          tests: [],
        };
        writeFileSync(outputFile, JSON.stringify(emptyGenericData, null, 2));
        process.stdout.write(`Created empty generic test data file: ${outputFile}\n`);
        return;
      }
      throw error;
    }

    // Parse JUnit XML
    const junitXml = await parseXML(junitXmlContent);

    // Convert to Generic Test Data format
    const genericTestData = convertJUnitToGeneric(junitXml);

    // Write output file
    writeFileSync(outputFile, JSON.stringify(genericTestData, null, 2));

    process.stdout.write(`Successfully converted ${inputFile} to ${outputFile}\n`);
    process.stdout.write(`Processed ${genericTestData.tests.length} test cases\n`);

    // Summary statistics
    const stats = genericTestData.tests.reduce((acc, test) => {
      acc[test.result] = (acc[test.result] || 0) + 1;
      return acc;
    }, {});

    process.stdout.write(`Test Results Summary: ${JSON.stringify(stats)}\n`);
  } catch (error) {
    console.error("Error converting JUnit to Generic format:", error.message);

    // Create fallback empty file
    const fallbackData = {
      version: "1",
      tests: [],
      error: `Conversion failed: ${error.message}`,
    };

    writeFileSync(outputFile, JSON.stringify(fallbackData, null, 2));
    process.stdout.write(`Created fallback generic test data file: ${outputFile}\n`);
  }
}

// Execute main function and handle any import errors gracefully
main().catch(() => {
  // Fallback implementation if main function fails
  const args = process.argv.slice(2);
  if (args.length !== 2) {
    console.error("Usage: node convert-junit-to-generic.mjs <input-file> <output-file>");
    process.exit(1);
  }

  const [, outputFile] = args;

  // Create a basic generic test data file
  const basicGenericData = {
    version: "1",
    tests: [],
    note: "Basic conversion - full functionality may require additional dependencies",
  };

  try {
    writeFileSync(outputFile, JSON.stringify(basicGenericData, null, 2));
    process.stdout.write(`Created basic generic test data file: ${outputFile}\n`);
  } catch (error) {
    console.error("Error creating output file:", error.message);
    process.exit(1);
  }
});
