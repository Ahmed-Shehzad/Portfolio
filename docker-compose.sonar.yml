version: "3.9"
services:
  postgres:
    image: postgres:15-alpine
    container_name: sonar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${SONAR_DB_USER:-sonar}
      POSTGRES_PASSWORD: ${SONAR_DB_PASSWORD:-sonarpass}
      POSTGRES_DB: ${SONAR_DB_NAME:-sonarqube}
    volumes:
      - sonar_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  sonar:
    image: sonarqube:10.6-community
    container_name: sonar
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/${SONAR_DB_NAME:-sonarqube}
      SONAR_JDBC_USERNAME: ${SONAR_DB_USER:-sonar}
      SONAR_JDBC_PASSWORD: ${SONAR_DB_PASSWORD:-sonarpass}
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true" # dev convenience only; remove for prod
      SONAR_WEB_JAVAADDITIONALOPTS: "-Djava.security.egd=file:/dev/./urandom"
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions
      - sonar_logs:/opt/sonarqube/logs
      - ./sonar/bootstrap:/bootstrap:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Optional on-demand scanner container (run manually)
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonar-scanner
    environment:
      SONAR_HOST_URL: http://sonar:9000
      SONAR_LOGIN: ${SONAR_TOKEN:-admin}
    working_dir: /usr/src
    volumes:
      - ./:/usr/src
    entrypoint: ["/bin/sh", "-c"]
    command: ["sonar-scanner || true"]
    depends_on:
      sonar:
        condition: service_healthy

volumes:
  sonar_pg_data:
  sonar_data:
  sonar_extensions:
  sonar_logs:
